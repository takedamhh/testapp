
■Flux
参考サイト）
https://aws.amazon.com/jp/blogs/news/building-a-gitops-pipeline-with-amazon-eks/
https://community.aws/tutorials/using-flux-to-implement-gitops-on-aws#4imagebased-automated-deployment-with-gitops-workflow

（０）前提
https://github.com/takedamhh/testapp にある Flaskアプリを対象とする。
testapp リポジトリのプライベートシークレットに、以下が設定されていること。（GitHub Actionsで使用している。）
AWS_ACCOUNT_ID
AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY

（１）bootstrap
# これをやると、eksにfluxが導入される。
# また、ownerに示したgithubに、repositoryの名称でリポジトリが作成される。
# このリポジトリにはflux関連の設定が格納される。

export GITHUB_TOKEN=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

flux bootstrap github \
--owner=takedamhh \
--repository=testflux \
--branch=main \
--private=false \
--personal=true \
--token-auth \
--path=clusters/takeda-m-eks-test 

（２）ecrを作成
926671442187.dkr.ecr.ap-southeast-1.amazonaws.com/testapp

（３）flux に testapp リポジトリの k8s 配下にあるマニュフェストを監視する設定を入れ込む。
git clone https://github.com/takedamhh/testflux
cd testflux

flux create source git testapp \
--url=https://github.com/takedamhh/testapp \
--branch=main \
--interval=30s \
--export > ./clusters/takeda-m-eks-test/testapp-source.yaml

flux create kustomization testapp \
  --target-namespace=default \
  --source=testapp \
  --path="./k8s" \
  --prune=true \
  --interval=1h \
  --export > ./clusters/takeda-m-eks-test/testapp-sync.yaml


■ArgoCD
（１）EKSにArgoCDを入れる
この↓を参考にArgoCDをEKSに入れて、管理画面にログインできるとこまでやる
https://qiita.com/miyabiz/items/4022b0aba372a8f2c292

（２）ArgoCDにApplicationを登録
以下のURLを参考にApplicationとして登録するGitHubリポジトリを登録する。
https://aws.amazon.com/jp/blogs/news/multi-cluster-management-for-kubernetes-with-cluster-api-and-argo-cd/
　→ Amazon EC2 上で動作する k8s クラスターと Amazon EKS クラスターをデプロイするために、Argo CD で Application を 作成する
※注）projectの値は、Application登録時のprojectと同一にすること。

その後、GUIでApplicationを登録する。
なお、上手く行ったサンプルのYAMLは以下。（GUIでYamlに切り替えて、以下を貼り付けできる。）
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: testapp
spec:
  destination:
    name: ''
    namespace: default
    server: 'https://kubernetes.default.svc'
  source:
    path: k8s
    repoURL: 'https://github.com/takedamhh/testapp'
    targetRevision: main
  sources: []
  project: default

（３）Application登録されたら、Syncするとpodが登録される。
SyncをManualにしているので、Application登録後にGUIからSyncすると
gitリポジトリのk8s配下にあるマニュフェストとkustomizeの設定を読み込んで
自動的にEKSへ反映させてくれる。




